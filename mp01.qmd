---
title: "MP1: Exploring the Most Popular Programming on Netflix"
author: "Shreya Karki"
date: "`r format(Sys.time(), '%d %B %Y')`"
format:
  html:
    toc: true
    toc-depth: 3
    code-fold: true
    number-sections: true
    smooth-scroll: true
execute:
  echo: true
  warning: false
  message: false
editor: visual
---

# Introduction

Netflix is one of the largest global streaming platforms, reaching audiences across many countries and languages.

This project explores Netflix's **Top 10 data** (global and per-country) to answer key questions:

-   In how many countries does Netflix operate and how does content performance vary regionally?
-   Which films and shows demonstrate sustained audience engagement versus short-term popularity?
-   How does local-language content perform globally, and what does this reveal about evolving viewer preferences?

The results are not just technical outputs, they reveal how Netflix identifies hit shows, supports local-language films, and builds worldwide franchises.

By systematically analyzing this data, three data-driven press releases are written that highlight success of films.

# Data Acquisition

The official Netflix **Top 10 weekly datasets** were retrieved directly from [Netflix Tudum](https://www.netflix.com/tudum/top10).

```{r data_import,eval=TRUE, echo=TRUE, include=TRUE}
# Create data/mp01 folder if it does not exist yet
if(!dir.exists(file.path("data", "mp01"))){
  dir.create(file.path("data", "mp01"), showWarnings=FALSE, recursive=TRUE)
}

# Define filename for global and country dataset

GLOBAL_TOP_10_FILENAME <- file.path("data", "mp01", "global_top10_alltime.csv")

if(!file.exists(GLOBAL_TOP_10_FILENAME)){
  download.file("https://www.netflix.com/tudum/top10/data/all-weeks-global.tsv", 
                destfile=GLOBAL_TOP_10_FILENAME)
}

COUNTRY_TOP_10_FILENAME <- file.path("data", "mp01", "country_top10_alltime.csv")

if(!file.exists(COUNTRY_TOP_10_FILENAME)){
  download.file("https://www.netflix.com/tudum/top10/data/all-weeks-countries.tsv", 
                destfile=COUNTRY_TOP_10_FILENAME)
}
```

# Data Cleaning

To prepare the datasets for analysis, several preprocessing steps were performed to ensure consistency and readability.

**Step 1** : Read the raw data into R.

```{r data_cleaning, eval=TRUE, echo=TRUE, include=TRUE}
# Load tidyverse if not installed 
if(!require("tidyverse")) install.packages("tidyverse")
library(readr)
library(dplyr)

# Reading the data 
GLOBAL_TOP_10 <- read_tsv(GLOBAL_TOP_10_FILENAME)
```

**Step 2**: Examine the structure of the dataset to understand its variables and formats and check for odd values.

```{r data_structure, eval=TRUE, echo=TRUE, include=TRUE}
#examining its structure

# Show  first 8 columns and limit elements per column
str(as.data.frame(GLOBAL_TOP_10), list.len = 8, vec.len = 3)


# Neat glimpse with limited width
glimpse(GLOBAL_TOP_10, width = 80)

```

**Step 3**: The `season_title` column contains the string "N/A" for films instead of a proper NA value. To correct this, the following transformation was applied.

```{r mutate_na, eval=TRUE, echo=TRUE, include=TRUE}
# Convert "N/A" values in season_title into proper NA
GLOBAL_TOP_10 <- GLOBAL_TOP_10 |>
  mutate(season_title = if_else(season_title == "N/A", 
                                NA_character_, season_title))
```

**Step 4** : Verify that the replacement worked as expected.

```{r check_corrected_dataset, eval=TRUE, echo=TRUE, include=TRUE}
# Check structure again to confirm "N/A" values are now NA

# show first 8 columns
str(as.data.frame(GLOBAL_TOP_10), list.len = 8, vec.len = 3)

glimpse(GLOBAL_TOP_10, width = 80)

```

**Step 5** : A similar adjustment was applied to the country-level dataset, ensuring "N/A" entries were also parsed as NA at the time of import.

```{r country_dataset, eval=TRUE, echo=TRUE, include=TRUE}
# Load the country-level dataset with NAs already parsed correctly

COUNTRY_TOP_10 <- read_tsv(COUNTRY_TOP_10_FILENAME, na = c("N/A", "NA"))

str(as.data.frame(COUNTRY_TOP_10), list.len = 8, vec.len = 3)
```

**Step 6**: Format column names and values

```{r table, eval=TRUE, echo=TRUE, include=TRUE}
library(DT)
library(stringr)
library(lubridate)

# Preview first 20 rows of the global dataset

GLOBAL_TOP_10 |> 
  head(n=20) |>
  datatable(options=list(searching=FALSE, info=FALSE))
```

When previewing the first rows of the global dataset, several formatting issues were observed:

1.  Column names written in as `weekly_hours_viewed` instead of human-readable Title Case.

2.  Large numeric values (e.g., hours viewed) are displayed without commas, making them harder to read.

**Step 7** : To improve readability, the column names were reformatted and large numbers formatted with commas with following codes:

```{r minutes_convert, eval=TRUE, echo=TRUE, include=TRUE}

#Reformat column names into Title Case and add commas to big numbers

format_titles <- function(df){
  colnames(df) <- str_replace_all(colnames(df), "_", " ") |> str_to_title()
  df
}

# Nicely formatted table
GLOBAL_TOP_10 |> 
  format_titles() |>
  head(n=20) |>
  datatable(options=list(searching=FALSE, info=FALSE)) |>
  formatRound(c('Weekly Hours Viewed', 'Weekly Views'))
```

**Step 8**: Since the season_title column was not relevant when previewing films, it was removed for clarity.

```{r drop_column, eval=TRUE, echo=TRUE, include=TRUE}
# Drop season title for films
GLOBAL_TOP_10 |> 
  select(-season_title) |>
  format_titles() |>
  head(n=20) |>
  datatable(options=list(searching=FALSE, info=FALSE)) |>
  formatRound(c('Weekly Hours Viewed', 'Weekly Views'))
```

**Step 9**: Finally, runtimes were converted into whole minutes to make interpretation easier.

```{r}
# Convert runtime to minutes
GLOBAL_TOP_10 |> 
  mutate(`runtime_(minutes)` = round(60 * runtime)) |>
  select(-season_title, -runtime) |>
  format_titles() |>
  head(n=20) |>
  datatable(options=list(searching=FALSE, info=FALSE)) |>
  formatRound(c('Weekly Hours Viewed', 'Weekly Views'))
```

# Exploratory Data Analysis (EDA)

With the datasets cleaned and prepared, the next step is to conduct analysis.

This stage focuses on identifying patterns and answering guiding questions about Netflix’s global reach, audience preferences, and the performance of different types of content.

The following section presents **Key Insights** that emerged from this analysis.

------------------------------------------------------------------------

## Global Operational Footprint

```{r q1-countries, eval=TRUE, echo=TRUE, include=TRUE}
# Count distinct countries in COUNTRY_TOP_10 dataset
global_reach <- COUNTRY_TOP_10 |> 
  distinct(country_name) |> 
  count()
```

With a presence in **`r global_reach$n` countries**, Netflix operates at a global scale.

## Performance of Non-English Language Films

```{r, eval=TRUE, echo=TRUE, include=TRUE}
# Non-English film with most cumulative weeks
global_nonenglish <- GLOBAL_TOP_10 |>
  filter(category == "Films (Non-English)") |>
  slice_max(cumulative_weeks_in_top_10, n = 1)

```

**`r global_nonenglish$show_title`** sustained audience interest for **`r global_nonenglish$cumulative_weeks_in_top_10` weeks**, making it one of the most popular international releases in Netflix’s history.

## Longest Movie to Stay in Top 10

```{r, eval=TRUE, echo=TRUE, include=TRUE}
# Longest film among English/Non-English films
longest_film <- GLOBAL_TOP_10 |> 
  filter(category %in% c("Films (English)", "Films (Non-English)")) |>
  mutate(runtime_in_minutes = runtime * 60) |>
  slice_max(runtime_in_minutes, n = 1)
```

With a runtime of **`r round(longest_film$runtime_in_minutes[[1]])`** minutes, **`r longest_film$show_title[[1]]`** is the longest film of any language to have ever appeared in the Netflix global Top 10.

## Most-Watched Shows and Films in Each Category

```{r, eval=TRUE, echo=TRUE, include=TRUE}
# Summarise total hours by category and title
most_watched <- GLOBAL_TOP_10 |>
  group_by(category, show_title) |>
  summarise(total_hours = sum(weekly_hours_viewed)) |>
  ungroup()

# Pick the top show/film in each category
most_watched_top <- most_watched |>
  group_by(category) |>
  slice_max(total_hours, n = 1)

# Display results in a table
datatable(most_watched_top,
          options = list(searching = FALSE, info = FALSE),
          caption = "Table 1. Most-watched title by category (total hours viewed)")
```

## Regional Content Longevity

```{r, eval=TRUE, echo=TRUE, include=TRUE}

# Find the TV show with the longest continuous run in one country

longest_tv_run <- COUNTRY_TOP_10 |>
  filter(category %in% c("TV", "TV (English)", "TV (Non-English)")) |>
  group_by(country_name, show_title) |>
  summarise(longest_run = max(cumulative_weeks_in_top_10)) |>
  ungroup() |>
  arrange(desc(longest_run)) |>
  slice_head(n = 1)

```

In **`r longest_tv_run$country_name`**, the series **`r longest_tv_run$show_title`** held a Top 10 spot for **`r longest_tv_run$longest_run`** weeks, the longest continuous run recorded in a single country.

## Country with Limited Netflix Service History

```{r, eval=TRUE, echo=TRUE, include=TRUE}

#Identify country with the fewest Netflix Top 10 weeks recorded

country_weeks <- COUNTRY_TOP_10 |>
  distinct(country_name, week) |> 
  count(country_name, name = "total_weeks") |>  
  arrange(total_weeks)  

# Get the country with the minimum number of weeks
limited_country <- country_weeks |>
  slice_head(n = 1) 
```

Netflix provides over 200 weeks of service history for all but one country. **`r limited_country$country_name`** has only **`r limited_country$total_weeks`** weeks of Top 10 data.

## Squid Games Total Viewership Across All Seasons

```{r, eval=TRUE, echo=TRUE, include=TRUE}
# Total viewing hours for Squid Game across all versions
squid_games <-GLOBAL_TOP_10 |>
  filter(show_title %in% c("Squid Game", "Squid Game: The Challenge")) |>
  summarize(total_hours = sum(weekly_hours_viewed))
```

Across all seasons, *Squid Game* has generated **`r format(round(squid_games$total_hours, 0), big.mark = ",", scientific = FALSE)`** hours of viewing, confirming its place as one of Netflix’s most impactful franchises worldwide.

## Red Notice's Debut Year View Count

```{r, eval=TRUE, echo=TRUE, include=TRUE}

# Calculate Red Notice total viewing hours in its debut year (2021)

red_notice <- GLOBAL_TOP_10 |>
  filter(show_title == "Red Notice", year(week) == 2021) |>
  summarise(total_hours = sum(weekly_hours_viewed, na.rm = TRUE)) |>
  mutate(approx_views = total_hours / (1 + 58/60))
```

Released in 2021, *Red Notice* reached approximately **`r format(round(red_notice$approx_views, 0), big.mark = ",")`** views, illustrating the blockbuster potential of Netflix original films.

## Slow Climb to the Top: Films That Grew Into #1 Hits

```{r,eval=TRUE, echo=TRUE, include=TRUE}

# Debut row per film in the US
us_film_debuts <- COUNTRY_TOP_10 |>
  filter(country_name == "United States", category == "Films") |>
  arrange(week) |>
  group_by(show_title) |>
  slice_head(n = 1) |>
  ungroup() |>
  select(show_title, debut_week = week, debut_rank = weekly_rank)

# Films that ever hit no.1 in the US
us_film_number1_titles <- COUNTRY_TOP_10 |>
  filter(country_name == "United States", category == "Films", weekly_rank == 1) |>
  distinct(show_title) |>
  pull(show_title)

# Slow climbers: debuted below one but later reached one
us_film_climbers <- us_film_debuts |>
  filter(debut_rank > 1, show_title %in% us_film_number1_titles)

# Totals + latest
us_film_climbers_total <- nrow(us_film_climbers)

us_film_climber_latest <- us_film_climbers |>
  arrange(desc(debut_week)) |>
  slice_head(n = 1)

# Top 10 recent slow climbers
us_climbers <- us_film_climbers |>
  arrange(desc(debut_week)) |>
  select(`Film Title` = show_title,
         `Debut Rank` = debut_rank,
         `Debut Date` = debut_week)

datatable(head(us_climbers, 10),
          options = list(searching = FALSE, info = FALSE),
          caption = "Table 2. US films that debuted below #1 but later climbed to #1")

```

In the United States, **`r us_film_climbers_total`** films debuted below #1 and later climbed to the top spot.

The most recent was **`r us_film_climber_latest$show_title`**, which first appeared at No. `r us_film_climber_latest$debut_rank`.

## Record-Breaking Global TV Debut

```{r, eval=TRUE, echo=TRUE, include=TRUE}

# Find each show's first appearance per country
country_show_debuts <- COUNTRY_TOP_10 |> 
  filter(category == "TV") |>
  group_by(show_title, season_title, country_name) |> 
  arrange(week) |> 
  slice_head(n = 1) |>
  ungroup() |>
  select(show_title, season_title, country_name, debut_week = week)

# Count how many countries shared the same debut week for each show-season.

debut_counts <- country_show_debuts |>
  group_by(show_title, season_title, debut_week) |>  
  summarize(num_countries = n()) |>  
  ungroup() |>
  arrange(desc(num_countries))

# Pull the single strongest global debut 
most_popular_show <- debut_counts |> slice_head(n = 1)
```

**`r most_popular_show$show_title`** had the strongest global debut, entering the Top 10 in `r most_popular_show$num_countries` countries during its debut period.

# Press Release

## Stranger Things Final Season Arrives After Surprising Global Run

```{r, eval=TRUE, echo=TRUE, include=TRUE}

# Count distinct weeks where Stranger Things appeared in any country's Top 10.

stranger_weeks <- COUNTRY_TOP_10 |>
  filter(show_title == "Stranger Things", category == "TV") |>
  group_by(week) |> 
  summarize() |>     
  nrow()

# How many country-week entries were ranked Top 3?
top_3_count <- COUNTRY_TOP_10 |>
  filter(show_title == "Stranger Things", category == "TV", weekly_rank <= 3) |>
  nrow()

# Show comparison between total appearances per TV show (all titles),
show_comparison <- COUNTRY_TOP_10 |>
  filter(category == "TV") |>
  group_by(show_title) |>
  summarize(total_appearances = n()) |>  
  arrange(desc(total_appearances)) |>
  head(10)

#Count appearances by country for Stranger things
country_counts <- COUNTRY_TOP_10 |>
  filter(show_title == "Stranger Things", category == "TV") |>
  group_by(country_name) |>
  summarize(appearances = n()) |> 
  arrange(desc(appearances))

# Count how many unique countries ever charted Stranger Things
total_countries <- length(unique(
  COUNTRY_TOP_10 |> 
    filter(show_title == "Stranger Things", category == "TV") |> 
    pull(country_name)
))

# Season-by-season appearances 
season_stats <- COUNTRY_TOP_10 |>
  filter(show_title == "Stranger Things", category == "TV") |>
  mutate(season = ifelse(is.na(season_title), "Stranger Things 1", season_title)) |>
  group_by(season) |>
  summarize(appearances = n()) |>
  arrange(season)
```

Stranger Things has become one of Netflix’s most enduring global hits, appearing in the top 10 for `r stranger_weeks` weeks across `r total_countries` countries.

While the show’s roots are firmly set in Hawkins, Indiana, its reach has extended far beyond the U.S, with Serbia emerging as an unexpected standout. Audiences there kept the series in their top 10 for `r country_counts$appearances[1]` weeks, reflecting the show’s unusual ability to resonate across cultures.

The series maintained strong audience interest across all seasons, with particularly notable performance for the first and most recent seasons.

**Season-by-Season Growth**

```{r, fig.cap="Stranger Things appearances in Netflix's Top 10 increased season by season"}

library(ggplot2)
ggplot(season_stats, aes(x = season, y = appearances)) +
  geom_col(fill = "lightpink") +  
  labs(title = "Stranger Things Grew Each Season",
       x = "Season",
       y = "Times in Top 10") +
  theme_minimal()
```

Part of its exceptional popularity in Serbia can be traced to the casting of local actor Nikola Đuričko as Yuri, the smuggler in season four. His performance generated buzz in local media and gave Serbian viewers a personal connection to the series.

The final season arrives with this unique legacy: a series that started as a nostalgic American story but became a global phenomenon, proving that good stories and good casting choices can create unexpected connections across borders.

## Hindi Films Make Global Box Office Waves on Netflix

```{r, eval=TRUE, echo=TRUE, include=TRUE}

# How long each film appeared in India Top 10
india_films <- COUNTRY_TOP_10 |> 
  filter(country_name == "India", category == "Films") |>
  group_by(show_title) |>
  summarize(weeks_in_india = n()) |>
  arrange(desc(weeks_in_india))

# Do the same for Films in the United States
us_films <- COUNTRY_TOP_10 |>
  filter(country_name == "United States", category == "Films") |>
  group_by(show_title) |>
  summarize(weeks_in_us = n())

# Titles that charted in India but never charted in the U.S.
hindi_films <- india_films |>
  filter(!show_title %in% us_films$show_title) |>
  arrange(desc(weeks_in_india))

# Compute the share of Film appearances that are from Hindi films
india_market_share <- COUNTRY_TOP_10 |>
  filter(country_name == "India", category == "Films") |>
  summarize(total_films_in_india = n(),
            hindi_films_count = sum(show_title %in% hindi_films$show_title),
            hindi_market_share = (hindi_films_count / total_films_in_india) * 100)

# Hindi Films market share % in India
hindi_share_pct <- round(india_market_share$hindi_market_share, 1)

# Top 3 Hindi films 
top3_hindi <- hindi_films[1:3, ]

# Growth trend over time for Hindi films
hindi_growth_trend <- COUNTRY_TOP_10 |>
  filter(show_title %in% hindi_films$show_title, country_name == "India") |>
  mutate(year = format(week, "%Y")) |>
  group_by(year) |>
  summarize(total_appearances = n(), .groups = "drop") |>
  arrange(year)

# Compare earliest and current years
earliest_year_count <- hindi_growth_trend$total_appearances[1]

latest_year_count <- hindi_growth_trend$total_appearances[length(hindi_growth_trend$total_appearances)]

if (latest_year_count > earliest_year_count) {
  hindi_popularity_trend <- "rising"
} else if (latest_year_count < earliest_year_count) {
  hindi_popularity_trend <- "declining"
} else {
  hindi_popularity_trend <- "stable"
}

# Countries where the Hindi film proxy (India hits not in US) is watched
country_analysis_hindi_films <- COUNTRY_TOP_10 |>
  filter(show_title %in% hindi_films$show_title) |>
  group_by(country_name) |>
  summarize(
    hindi_films_watched = n_distinct(show_title),
    total_appearances   = n()) |>
  ungroup() |>
  arrange(desc(total_appearances))

# Denominators for percentage shares
total_appearances_all <- sum(country_analysis_hindi_films$total_appearances)
total_films_all       <- sum(country_analysis_hindi_films$hindi_films_watched)

# Per-country percentage viewership/films 
percentage_analysis <- country_analysis_hindi_films |>
  mutate(
    pct_viewership = round((total_appearances / total_appearances_all) * 100, 2),
    pct_films      = round((hindi_films_watched / total_films_all) * 100, 2)
  ) |>
  select(country_name, pct_viewership, pct_films) |>
  arrange(desc(pct_viewership))

# Top markets
top_markets <- head(percentage_analysis, 5)

```

Hindi blockbusters are no longer just local sensations, they are shaping a new global market for streaming hits.

Hindi films account for `r hindi_share_pct`% of all film appearances in India’s Top 10 charts, underscoring their dominant position in the country’s streaming landscape.

Some titles became runaway sensations, spending weeks in the rankings.

-   **`r top3_hindi$show_title[1]`** held its spot for `r top3_hindi$weeks_in_india[1]` weeks
-   **`r top3_hindi$show_title[2]`** stayed for `r top3_hindi$weeks_in_india[2]` weeks, and
-   **`r top3_hindi$show_title[3]`** logged `r top3_hindi$weeks_in_india[3]` weeks.

In the earliest tracked year, Hindi films appeared `r earliest_year_count` times in India’s Top 10. By the most recent year, that number had grown to `r latest_year_count`, showing a clear `r hindi_popularity_trend` trend in audience demand.

Beyond India, Hindi films are making waves in places like Bangladesh, Pakistan, and Sri Lanka. The table below shows the top five international markets where Hindi films have built the strongest followings.

```{r}

library(ggplot2)

ggplot(top_markets, aes(x = reorder(country_name, -pct_viewership), y = pct_viewership)) +
  geom_col(fill = 'wheat') +
  labs(
    title = "Top Markets for Hindi Films on Netflix",
    x = "Country",
    y = "Share of Appearances (%)"
  ) +
  theme_minimal()
```

*Note: Percentage does not tell the whole story. With limited data, it would be misleading to think Hindi films make up only 5% of viewing, India’s true impact is much larger.*

The data makes one thing clear: Hindi cinema is no longer confined to its home market. With global audiences tuning in and Indian viewers returning week after week, Netflix has become a new stage where Bollywood blockbusters are building worldwide momentum.

## From K-Pop to Can't-Stop: The Show That Refuses to Leave Netflix's Top 10

```{r, eval=TRUE, echo=TRUE, include=TRUE}

kpop_stats <- GLOBAL_TOP_10 |>
  filter(show_title == "KPop Demon Hunters") |>
  summarize(
    total_weeks = n_distinct(week),
    best_rank = min(weekly_rank),
    worst_rank = max(weekly_rank),
    total_hours = sum(weekly_hours_viewed),
    avg_weekly_hours = mean(weekly_hours_viewed))

# Weekly performance trend
kpop_weekly <- GLOBAL_TOP_10 |>
  filter(show_title == "KPop Demon Hunters") |>
  arrange(week) |>
  select(week, weekly_rank, weekly_hours_viewed, weekly_views)

# Compare with other long-running hits
long_running_hits <- GLOBAL_TOP_10 |>
  group_by(show_title) |>
  summarize(weeks_in_top10 = n_distinct(week)) |>
  arrange(desc(weeks_in_top10)) |>
  head(10)

# Country-specific performance for K-Pop Demon Hunters
kpop_countries <- COUNTRY_TOP_10 |>
  filter(show_title == "KPop Demon Hunters") |>
  group_by(country_name) |>
  summarize(weeks_in_country_top10 = n(),best_rank = min(weekly_rank)) |>
  arrange(desc(weeks_in_country_top10))
```

*K-Pop Demon Hunters* has maintained an impressive presence in Netflix's global top 10 ever since its release, remaining in the charts for `r kpop_stats$total_weeks` consecutive weeks.

The series achieved a peak rank of `r kpop_stats$best_rank` worldwide while accumulating `r round(kpop_stats$total_hours / 1e6, 1)` million viewing hours, proving that innovative genre fusion can create its own category of hit content.

The series turned cultural specificity into a strategic advantage, blending K-pop's massive global appeal with supernatural storytelling to create must-watch television. Rather than limiting its reach, the show's unique identity became its superpower, building a dedicated international audience that returned week after week.

# Conclusion

The results of the analysis show that Netflix success take many forms. While Stranger Things built lasting global momentum with `r stranger_weeks` weeks across `r total_countries` countries, K-Pop Demon Hunters sustained attention for `r kpop_stats$total_weeks` straight weeks, proving consistency can rival spectacle.

On the contrary, Hindi films, accounting for `r hindi_share_pct`% of India’s Top 10, showed how local cinema can grow into a global streaming force.

Together, these cases illustrate that there is no single formula for streaming success. Longevity, cultural specificity, and regional strength each play a role in building hits that travel across borders and resonate with diverse audiences worldwide.
